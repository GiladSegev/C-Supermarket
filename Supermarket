#define MAX_NUM_PRODUCTS 20
#define MAX_PRODUCT_NAME_LENGTH 20
#define MAX_CATEGORY_LENGTH 10
#define BARCODE_LENGTH 12
#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include <string.h>
#include <stdlib.h>

const char * main_interface = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"\
"Welcome to CORONA market!\n"\
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"\
"Manage market menu :\n"\
"	1. Add product\n"\
"	2. Remove product\n"\
"	3. Check which products are expired\n"\
"	4. Print all the products\n"\
"	5. Update product\n"\
"	6. EXIT SYSTEM\n"\
"Please choose operation[1-6]:";

//operation 1 constant strings

const char *  adding_product_barcode = "Please enter product barcode:";
const char * barcode_already_exist = "This product already exist, please enter the number of products to add:";
const char * too_much_products = "Can't add more products, not enough space";
const char * adding_product_name = "Please enter product name:";
const char * adding_product_category = "Please enter product category:";
const char * adding_product_number = "Please enter number of products to add:";
const char * adding_product_price = "Please enter the price of the product:";
const char * adding_product_date = "Please enter expiration date of the product[dd/mm/yy]:";

//operation 2 constant strings
const char * store_empty = "The store is empty!";
const char * delete_barcode = "Please enter product barcode you want to delete:";
const char * delete_barcode_cant_find = "Couldn't find the product barcode, try again...";
const char * delete_barcode_succeed = "The product deleted successfully!";


//operation 3 constant strings
const char * expired_date_check = "What date you want to check[dd/mm/yy]:";
const char * expired_products = "~~~~~~~~~~~~~~~Expired Products~~~~~~~~~~~~~~~\n";
const char * expired_product_name = "Product name: ";
const char * expired_product_barcode = "Product barcode: ";
const char * expired_product_date = "Product expiration date: ";


//operation 4 constant strings
const char * print_products_head = "~~~~~~~~~~~~~~~All Products~~~~~~~~~~~~~~~\n";
const char * print_no_products = "No products in the store!\n";
const char * print_products = "----------";
const char * print_product_name = "Product name: ";
const char * print_product_barcode = "Product barcode: ";
const char * print_product_category = "Product category: ";
const char * print_product_number = "Product available quantity: ";
const char * print_product_price = "Product price: ";
const char * print_product_expireDate = "Product expiration date: ";
const char * print_total_number = "Total number of products: ";

//operation 5 constant strings
const char * update_barcode = "Please enter product barcode you want to update:";
const char * update_barcode_notFound = "Couldn't find the product barcode, try again...";
const char * update_interface_string = ("What do you want to update?\n"\
	"	1. Product name\n"\
	"	2. Product category\n"\
	"	3. Product quantity\n"\
	"	4. Product price\n"\
	"	5. Product expiration date\n"\
	"Please choose operation [1-5]:");
const char * update_product_name = "Please enter new product name:";
const char * update_product_category = "Please enter new product category:";
const char * update_product_number = "Please enter new product quantity:";
const char * update_product_price = "Please enter new product price:";
const char * update_product_date = "Please enter new product expiration date[dd/mm/yy]:";

//operation 6 constant strings
const char * exitProgram = "exit...";

typedef struct date {
	int year;
	int month;
	int day;
} date;

typedef struct product {
	char * product_name;
	char * product_category;
	char * barcode;
	int available;
	double price;
	date * expire_date;
} product;

typedef struct super_market {
	product ** product_list;
	int number_of_products;
} super_market;


/*Inputs: int x
Return parameter: Char*
Function fanctionality: Allocate a memory with the length of (x+1),
reads a string from the uesr char by char and returns its pointer*/
char* read_line(int capacity)
{
	int index = 0;
	char check_char = '0';
	char *buffer = "0";

	if(NULL == (buffer = malloc(capacity + 1)))
	{
		return NULL;
	}
	check_char = getchar();
	while (index < (capacity + 1))
	{
		buffer[index++] = check_char;
		check_char = getchar();
		if (check_char == '\n')
		{
			break;
		}
	}
	buffer[index] = '\0';
	return buffer;
}


/*Inputs: Char* barcode, const super_market* sm
Return prameter: int
Function functionality: Compares each of the supermarket's products' barcode with the given barcode parameter.
If equal returns the index, if none is equal returns -1*/
int compare_barcode(char* bar, const super_market* sm) {
	int i = 0;
	for (i = 0; i < sm->number_of_products; i++) {
		if (strcmp(sm->product_list[i]->barcode, bar) == 0) {
			return i;
		}
	}
	return -1;
}


/*Inputs: Char* date
Return parameter: None
Function functionality: Reads a string with length of 9 represents a date to the given Char* */
void read_date(char* date)
{
	int i;
	char c = NULL;
	for (i = 0; i < 8; i++)
	{
		c = getchar();
		*(date + i) = c;
	}
	getchar();
	*(date + i) = '\0';
}


/*Inputs: product* pro, Char* date
Return parameter: None
Function functionality: devide a dd/mm/yy date string into seperate int values of day, month, year
and implements them to the given product's matching date values*/
void implement_date(product* pro, char* date)
{
	pro->expire_date->day = (date[0] - 48) * 10 + (date[1] - 48);
	pro->expire_date->month = (date[3] - 48) * 10 + (date[4] - 48);
	pro->expire_date->year = (date[6] - 48) * 10 + (date[7] - 48);
}


/*Inputs: product* new_product, char* barcode
Return parameter: None
Function functionality: Creates a new product with all of the products fields*/
void init(product* new_pro, char* bar)
{
	int j = 0, day = 0, month = 0, year = 0;
	new_pro->barcode = bar;

	printf("%s", adding_product_name);
	new_pro->product_name = read_line(MAX_PRODUCT_NAME_LENGTH);
	if (new_pro->product_name == NULL) {
		return 1;
	}

	printf("%s", adding_product_category);
	new_pro->product_category = read_line(MAX_CATEGORY_LENGTH);
	if (new_pro->product_category == NULL) {
		return 1;
	}

	printf("%s", adding_product_number);
	scanf_s("%d", &new_pro->available);
	getchar();
	if (new_pro->available == NULL)
	{
		return 1;
	}

	printf("%s", adding_product_price);
	scanf_s("%lf", &new_pro->price);
	getchar();

	printf("%s", adding_product_date);
	new_pro->expire_date = malloc(sizeof(date));
	if (new_pro->expire_date == NULL)
	{
		return 1;
	}
	char date[9] = { 0 };
	read_date(date);
	implement_date(new_pro, date);
}


/*Inputs: super_market* sm
Return parameter: None
Function functionality: Reads a barcode from the user and checks if the barcode already exist in the given supermarket.
If it is, updating the matching product's quantity and if not, checks that the given super_market isn't full, allocates
a memory and creates a new product with this barcode*/
void Add_product(super_market* sm)
{
	int j = 0;
	int found_bar = 0;
	int new_pro_num = 0;

	printf("%s", adding_product_barcode);
	char *barcode = read_line(BARCODE_LENGTH);
	if (barcode == NULL) {
		return 1;
	}

	found_bar = compare_barcode(barcode, sm);
	if (found_bar != -1)
	{
		printf("%s", barcode_already_exist);
		scanf_s("%d", &new_pro_num);
		sm->product_list[found_bar]->available = sm->product_list[found_bar]->available + new_pro_num;
		printf("Additional %d products of %s added\n", new_pro_num, sm->product_list[found_bar]->product_name);
		return;
	}

	if (sm->number_of_products == MAX_NUM_PRODUCTS) {
		printf("%s", too_much_products);
		return;
	}

	product* new_pro = malloc(sizeof(product));
	if (new_pro == NULL) {
		return 1;
	}
	init(new_pro, barcode);
	printf("The product %s -barcode:%s ,added successfully\n", new_pro->product_name, new_pro->barcode);
	sm->product_list[sm->number_of_products++] = new_pro;
	sm->product_list = realloc(sm->product_list, (sm->number_of_products + 1) * sizeof(product));
}


/*Inputs: super_market* sm
Return parameter: None
Function functionality: Checks if the store isn't empty, if not reads a barcode from the user and searching it in
the given super_market. If found, deletes the matching product, if not prints a suitable message*/
void Remove_product(super_market* sm)
{
	if (sm->number_of_products == 0)
	{
		printf("%s\n", store_empty);
		return;
	}

	int i = 0;
	printf("%s", delete_barcode);
	char *barcode = read_line(BARCODE_LENGTH);
	int position = 0;
	position = compare_barcode(barcode, sm);

	while (position == -1)
	{
		printf("%s\n", delete_barcode_cant_find);
		printf("%s", delete_barcode);
		barcode = read_line(BARCODE_LENGTH);
		position = compare_barcode(barcode, sm);
	}
	if (position != -1)
	{
		printf("%s\n", delete_barcode_succeed);
		free(sm->product_list[position]);
		if (position != sm->number_of_products - 1) {
			for (i = position; i < sm->number_of_products-1; i++) {
				sm->product_list[i] = sm->product_list[i + 1];
			}
		}
		sm->number_of_products--;
	}

}


/*Inputs: Super_market* sm
Return parameter: None
Function functionality: Reads a date from the user and compares each of the given super_market's products dates
to check which is expired accordding to the user's date. Prints all the expired products*/
void Check_products(super_market* sm)
{
	int i, day, month, year;
	char whole_date[9] = { 0 };

	printf("%s", expired_date_check);
	read_date(whole_date);

	day = (whole_date[0] - 48) * 10 + (whole_date[1] - 48);
	month = (whole_date[3] - 48) * 10 + (whole_date[4] - 48);
	year = (whole_date[6] - 48) * 10 + (whole_date[7] - 48);

	printf("%s", expired_products);
	for (i = 0; i < sm->number_of_products; i++)
	{
		if (sm->product_list[i]->expire_date->year >= year)
			if (sm->product_list[i]->expire_date->month >= month)
			{
				if (sm->product_list[i]->expire_date->month > month)
					continue;
				else
					if (sm->product_list[i]->expire_date->day >= day)
						continue;
			}

		printf("%s", expired_product_name);
		printf("%s\n", sm->product_list[i]->product_name);
		printf("%s", expired_product_barcode);
		printf("%s\n", sm->product_list[i]->barcode);
		printf("%s", expired_product_date);
		printf("%d/%d/%d\n", sm->product_list[i]->expire_date->day, sm->product_list[i]->expire_date->month, sm->product_list[i]->expire_date->year);
	}
}


/*Inputs: super_market* sm
Return parameter: None
Function functionality: Checks if the given super_market is empty. If it is prints a suitable message, if noet empty
prints all of the super_market's products*/
void Print_products(super_market* sm)
{
	int i;
	if (sm->number_of_products == 0)
	{
		printf("%s", print_no_products);
		return;
	}

	printf("%s", print_products_head);
	for (i = 0; i < sm->number_of_products; i++)
	{
		printf("%s\n", print_products);
		printf("%s%s\n", print_product_name, sm->product_list[i]->product_name);
		printf("%s%s\n", print_product_barcode, sm->product_list[i]->barcode);
		printf("%s%s\n", print_product_category, sm->product_list[i]->product_category);
		printf("%s%d\n", print_product_number, sm->product_list[i]->available);
		printf("%s%.2lf\n", print_product_price, sm->product_list[i]->price);
		printf("%s%d/%d/%d\n", print_product_expireDate, sm->product_list[i]->expire_date->day, sm->product_list[i]->expire_date->month, sm->product_list[i]->expire_date->year);
	}
	printf("%s %d\n", print_total_number, sm->number_of_products);
}


/*Inputs:Super_market* sm
Return parameter: None
function functionality: Checks that the given super_market isn't empty. If it is, prints a suitable message.
If not empty, reads a barcode from the user, finds the matching product in the super_market and updates
one of its fields  according ti the user's choice*/
void Update_product(super_market* sm)
{
	int i = 0, up_choice = NULL;
	double new_price = 0;
	char do_nothing = NULL, date[9] = { 0 };
	char* pro_bar = NULL;

	if (sm->number_of_products == 0)
	{
		printf("%s", print_no_products);
		return;
	}

	do
	{
		printf("%s", update_barcode);
		pro_bar = read_line(BARCODE_LENGTH);
		i = compare_barcode(pro_bar, sm);
		if (i == -1)
		{
			printf("%s\n", update_barcode_notFound);
		}
	} while (i == -1);
	{

		printf("%s", update_interface_string);
		scanf_s("%d", &up_choice);
		do_nothing = getchar();
		switch (up_choice)
		{
		case 1:
			printf("%s", update_product_name);
			char*new_name = read_line(MAX_PRODUCT_NAME_LENGTH);
			free(sm->product_list[i]->product_name);
			sm->product_list[i]->product_name = new_name;
			break;

		case 2:
			printf("%s", update_product_category);
			char*new_category = read_line(MAX_CATEGORY_LENGTH);
			free(sm->product_list[i]->product_category);
			sm->product_list[i]->product_category = new_category;
			break;

		case 3:
			printf("%s", update_product_number);
			int new_quant = 0;
			scanf_s("%d", &new_quant);
			sm->product_list[i]->available = new_quant;
			break;

		case 4:
			printf("%s", update_product_price);
			scanf_s("%lf", &new_price);
			sm->product_list[i]->price = new_price;
			break;

		case 5:
			printf("%s", update_product_date);
			read_date(date);
			free(sm->product_list[i]->expire_date);
			implement_date(sm->product_list[i], date);
			break;
		}
	}
}


/*Inputs: product* pro
Return parameter: None
Function functionality: Frees all of the given product's allicate memory*/
void clear_products(product* pro)
{
	free(pro->barcode);
	pro->available = 0;
	free(pro->expire_date);
	free(pro->product_category);
	free(pro->product_name);
	pro->price = 0;
}


/*Inputs: super_market* sm
Return parameter: None
function functionality: Deletes the given super_market by freeing all of its allocated memory*/
void EXIT_SYSTEM(super_market* sm)
{
	int i = 0;
	for (i = 0; i < sm->number_of_products; i++)
	{
		clear_products(sm->product_list[i]);
	}
	free(sm->product_list);
	free(sm);
	printf("%s", exitProgram);
}

int main()
{
	int user_choice = 0;
	char do_nothing = NULL;

	super_market* sm = malloc(sizeof(super_market));
	if (sm == NULL) {
		return 1;
	}
	sm->number_of_products = 0;
	sm->product_list = malloc(1 * sizeof(product));
	while (user_choice != 6)
	{
		printf("%s", main_interface);
		scanf_s("%d", &user_choice);
		do_nothing = getchar();

		switch (user_choice)
		{
		case 1:
			Add_product(sm);
			break;
		case 2:
			Remove_product(sm);
			break;
		case 3:
			Check_products(sm);
			break;
		case 4:
			Print_products(sm);
			break;
		case 5:
			Update_product(sm);
			break;
		case 6:
			EXIT_SYSTEM(sm);
			break;

		default:
			break;
		}
	}
	return 0;
}

